CREATE OR REPLACE PROCEDURE REFRESH_LN_BILLING_COUNT
/*****************************************************************
Ver   Date          Author           Description
----  -----------   ---------------- -----------------------------
1.0   16-MAR-2020   YFANG            CREATED PROCEDURE
1.1   26-MAR-2020   YFANG            ADDED DATE
1.2   17-MAR-2021   YFANG            REMAPPED FROM LEXIS_NEXIS_PII TO LEXIS_NEXIS_LOG
                                     CHANGED FROM DATE_REQUESTED TO LOG_DATE
1.3   25-MAR-2021   YFANG            TRUNC LOG_DATE
1.4   26-MAY-2021   YFANG            ADDED %REMAIL%
*******************************************************************/
IS
LOG_DATE DATE;
USNAME VARCHAR2(30);

BEGIN
LOG_DATE:=SYSDATE;

--GET USER
SELECT UPPER(SYS_CONTEXT('USERENV','OS_USER')) INTO USNAME FROM DUAL;

--LOG PROCEDURE START IN UPDATE LOG
UPDATE ANALYTICS.UPDATE_LOG SET NOTES = REPLACE(NOTES, 'STARTED BY USER', 'NOT COMPLETED') WHERE PROCESS = $$PLSQL_UNIT;
INSERT INTO ANALYTICS.UPDATE_LOG (
START_DATE,
USERNAME,
PROCESS,
NOTES)
VALUES(LOG_DATE, USNAME, $$PLSQL_UNIT, 'UPDATE STARTED BY USER;');
COMMIT;

--------------------This is for LN billing count--------------------------------------------------------------------------------
--GET ALL LN_REFRESH
EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_LN_BILLING_COUNT_1';

INSERT INTO TEMP_LN_BILLING_COUNT_1
SELECT /*+PARALLEL(MLR,6) FULL(MLR)*/
TRUNC(MLR.DATE_CREATED) AS MLR_DATE
, PERSON_ID
, MAX(MLR.ENTITY_ID) AS ENTITY_ID
FROM PROSPECT.MAILING_LIST_RECORD MLR
LEFT OUTER JOIN PROSPECT.MAILING_LIST ML ON MLR.LIST_ID = ML.ENTITY_ID
WHERE NVL(MLR.AID,ML.AID) = 'LN_REFRESH'
and nvl(mlr.description,'4') not like '%LNFR_NULL%'  
and nvl(mlr.description,'4') not like '%LNFR_NWR%'
and nvl(mlr.description,'4') not like '%REMAIL%'
GROUP BY TRUNC(MLR.DATE_CREATED)
, PERSON_ID;
COMMIT;

--COUNTS FOR LEXIS NEXIS
EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_LN_BILLING_COUNT_2';


INSERT INTO TEMP_LN_BILLING_COUNT_2
SELECT /*+FULL(A) PARALLEL(A,4)*/ TRUNC(A.LOG_DATE,'DD') AS DATE_REQUESTED
, COUNT(*) AS CT
, COUNT(DISTINCT CASE WHEN ACC.ORDER_DATE IS NOT NULL
						OR LN.ENTITY_ID IS NOT NULL THEN A.MAILING_LIST_RECORD_ID END) AS CT_ORDERED
, COUNT(DISTINCT CASE WHEN ACC.CREATION_DATE IS NOT NULL
												AND ACC.ORDER_DATE IS NULL
												AND ACC.CANCELLED_DATE IS NULL THEN ACC.MAILING_LIST_RECORD_ID END) AS CT_UNPROCESSED
FROM LEXIS_NEXIS_LOG A
LEFT OUTER JOIN ACCOUNTS ACC ON A.MAILING_LIST_RECORD_ID = ACC.MAILING_LIST_RECORD_ID
LEFT OUTER JOIN TEMP_LN_BILLING_COUNT_1 LN ON A.MAILING_LIST_rECORD_ID = LN.ENTITY_ID
GROUP BY TRUNC(A.LOG_DATE,'DD')
ORDER BY 1
;
COMMIT;

--COUNTS FOR LEXIS NEXIS PROCESSED ONLY
EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_LN_BILLING_COUNT_3';

INSERT INTO TEMP_LN_BILLING_COUNT_3
SELECT
DATE_REQUESTED
,CT
,CT_ORDERED
FROM TEMP_LN_BILLING_COUNT_2
WHERE CT_UNPROCESSED = 0
ORDER BY 1
;
COMMIT;

--COUNTS FOR LEXIS NEXIS INCREMENTAL
EXECUTE IMMEDIATE 'TRUNCATE TABLE TEMP_LN_BILLING_COUNT_4';

INSERT INTO TEMP_LN_BILLING_COUNT_4
SELECT
DATE_REQUESTED
,CT
,CT_ORDERED
FROM TEMP_LN_BILLING_COUNT_3
WHERE DATE_REQUESTED>(SELECT MAX(DATE_REQUESTED)
FROM LN_BILLING_COUNT)      --PREVIOUS DATA
;

COMMIT;

--UPDATE LN_BILLING_COUNT WITH LATEST INCREMENTAL DATA
INSERT INTO LN_BILLING_COUNT
SELECT
DATE_REQUESTED
,CT
,CT_ORDERED
,TRUNC(SYSDATE,'DD') AS INSERT_DATE
FROM TEMP_LN_BILLING_COUNT_4;

COMMIT;

--LOG SUCCESSFUL PROCEDURE EXECUTION
UPDATE ANALYTICS.UPDATE_LOG
  SET END_DATE = SYSDATE, NOTES='UPDATE SUCCESSFUL;'
      WHERE PROCESS=$$PLSQL_UNIT AND START_DATE=LOG_DATE AND USNAME=USERNAME;
COMMIT;

END;




